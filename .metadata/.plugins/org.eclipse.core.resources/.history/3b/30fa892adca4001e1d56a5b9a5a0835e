package com.point.rest;


import java.lang.reflect.Type;

import org.springframework.amqp.core.Queue;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.point.config.IChannel;
import com.point.model.ChannelRequest;
import com.point.model.RequestPointDTO;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.point.model.Point;
import com.point.model.ResultVO;
import com.point.service.PointService;
import com.product.model.Product;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;

@Tag(name="Point service API", description="Point service API")
@RestController
@RequiredArgsConstructor
@RequestMapping("/api")
public class PointController {
	@Autowired
	private final PointService pointService;

	@PostMapping("/points")
	@Operation(summary = "포인트를 등록합니다.")
	public ResponseEntity<ResultVO<Point>> register(@RequestBody Point point) throws Exception {
		return pointService.register(point);
	}
	
	@GetMapping("/points/{userId}")
	@Operation(summary = "포인트를 검색합니다.")
	@Parameters({
		@Parameter(name="userId", in=ParameterIn.PATH, description="사용자ID", required=true, allowEmptyValue=false) 
	})	
	public ResponseEntity<ResultVO<Point>> search(@PathVariable(name="userId", required=true) String userId) {
		return pointService.search(userId);
	}

	@PutMapping("/points/minus/{userId}/{point}")
	@Operation(summary = "포인트 차감 합니다.")
	public ResponseEntity<ResultVO<Point>> minus(
			@PathVariable(name="userId", required=true) String userId,
			@PathVariable(name="point", required=true) int point) {
		return pointService.minus(userId, point);
	}

	@PutMapping("/points/plus/{userId}/{point}")
	@Operation(summary = "포인트 증액 합니다.")
	public ResponseEntity<ResultVO<Point>> plus(
			@PathVariable(name="userId", required=true) String userId,
			@PathVariable(name="point", required=true) int point) {
		return pointService.plus(userId, point);
	}
	
	/*
	 * 응답 큐
	 */
	@Bean
	Queue responseQueue() {
		return new Queue(IChannel.CH_ORDER_RESPONSE, false);
	}

	/*
	 * POINT 큐
	 */
	@Bean
	Queue queue() {
		return new Queue(IChannel.CH_ORDER_POINT, false);
	}

	@RabbitListener(queues = IChannel.CH_ORDER_POINT)
	public void processMessage(String payload) {
		/*
		 * json 문자열을 객체로 변환
		 */
		System.out.println("[@.@ POINT RECEIVED] " + payload.toString());
		
		Gson gs = new Gson();
		Type objType = new TypeToken<ChannelRequest<RequestPointDTO>>(){}.getType();
		ChannelRequest<RequestPointDTO> req = gs.fromJson(payload, objType);

		if ( "RLB".equals(req.getMessageType()) ) {
			pointService.rollback(req);
		}
		else {
			//System.out.println("차감포인트: "+req.getPayload().getPoint());
			// TRX
			pointService.startTransaction(gs, req);
		}
	}

}