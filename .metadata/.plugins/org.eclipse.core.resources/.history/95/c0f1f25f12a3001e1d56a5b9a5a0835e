package com.customer.service;

/*
 * Service Layer: UserService
 */

import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import com.customer.dao.UserDao;
import com.customer.model.User;
import com.customer.model.ResultVO;

@Service
public class UserServiceImpl implements UserService {
	private final Logger log = LoggerFactory.getLogger(getClass());

	@Autowired
	private UserDao userDao;

	public ResponseEntity <List<User>> getUserList() { 
		List<User> list = null;
		try {
			log.info("Start db select");
			list = userDao.selectUserAll();
		} catch (Exception e) {
			e.printStackTrace();
		}
		log.debug("user counts :"+list.size());

		return new ResponseEntity<List<User>> (list, HttpStatus.OK);
	}

	public ResponseEntity <User> getUserById(String userId) { 
		User re = null;
		try {
			log.info("Start db select");
			re = userDao.selectUser(userId);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ResponseEntity<User> (re, HttpStatus.OK);
	}
	
	public ResponseEntity<ResultVO<User>> get(String userId) {
		ResultVO<User> result = new ResultVO<>();
		User user = null;
		try {
			user = userDao.selectUser(userId);

		} catch (Exception e) {
			e.printStackTrace();
		}
		if (user != null) {
			result.setReturnCode(true);
			result.setResult(user);
		} else {
			result.setReturnCode(false);
			result.setReturnMessage("지정된 주문 정보가 없습니다.");
		}

		return new ResponseEntity<ResultVO<User>>(result, HttpStatus.OK);
	}

	public ResponseEntity <String > setUserUpdate(String userId, User user) throws Exception {
		log.info("Start db update==>"+userId);

		int re  = userDao.updateUser(user);
		log.debug("result :"+ re);

		return new ResponseEntity<String> (re+"", HttpStatus.OK);
	}

	public ResponseEntity <String > setUserInsert(User user) throws Exception { 
		log.info("Start db insert");
		int re  = userDao.insertUser(user);
		log.debug("result :"+ re);

		return new ResponseEntity<String> (re+"", HttpStatus.OK);	
	}

	public ResponseEntity <String > setUserDelete(String userId) throws Exception { 
		log.info("Start db delete==>"+userId);
		int re  = userDao.deleteUser(userId);
		log.debug("result :"+ re);

		return new ResponseEntity<String> (re+"", HttpStatus.OK);
	}

	public void updatePoint(Map<String, Object> parm) {
		log.info("Start updatePoint");
		userDao.updatePoint(parm);
	}

}