package com.order.service;

import com.google.gson.JsonElement;

import reactor.core.publisher.FluxSink;

/**
 * 메시지 브로커로 전달된 메시지를 Flux 스트림에 제공한다.
 */
@SuppressWarnings({ "unchecked", "rawtypes" })
public class ResultListener
{
	private FluxSink<JsonElement> sink;

	public void register(FluxSink sink)
	{
		this.sink = sink;
	}

	/**
	 * @param data 카프카 수신 데이터
	 */
	public void fireData(JsonElement recvData)
	{
		OrderEvent event = sink.currentContext().get("orderEvent");
		if ( event != null ) {
			String type = ((JsonElement)recvData).getAsJsonObject().get("messageType").getAsString();

			if ( "PAYMENT".equals(type) ) {
				event.setPaymentCompleted(true);
			}
			else if ( "DELIVERY".equals(type) ) {
				event.setDeliveryCompleted(true);
			}

			boolean returnCode = ((JsonElement)recvData).getAsJsonObject().get("returnCode").getAsBoolean();

			if ( returnCode == false ) {
				/*
				 * 참여자의 작업이 실패한 경우 완료 처리한다.
				 */
				//sink.complete();
				sink.error(new FailThrowable(recvData));
			}
			else {
				// 메시지 전달
				sink.next(recvData);
				//if ( event.isDeliveryCompleted() && event.isPaymentCompleted() ) {
				if ( event.isPaymentCompleted() ) {
					// 결제, 배송 서비스 수행 결과를 수신하면 완료
					sink.complete();
				}
			}
		}
	}
}
