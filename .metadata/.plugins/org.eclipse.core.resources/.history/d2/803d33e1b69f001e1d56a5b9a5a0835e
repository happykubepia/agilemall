package com.customer.rest;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicLong;

import org.springframework.amqp.core.Queue;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.customer.config.IChannel;
import com.customer.model.User;
import com.customer.service.UserService;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.customer.model.ChannelResponse;
import com.customer.model.ResponsePointVO;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;

/*
 * springdoc-openapi
 * https://springdoc.org/#migrating-from-springfox
 */

@Tag(name="Customer service API", description="Customer service API")
@RestController
@RequiredArgsConstructor
@RequestMapping("/api")
public class UserController {
	@Autowired
	private final UserService userService;
	
	@GetMapping("/users/{userId}")
	@Operation(summary="아이디로 사용자 정보 가져오기 ")
	@Parameters({
		@Parameter(name="userId", in=ParameterIn.PATH, description="", required=true, allowEmptyValue=false) 
	})
	public ResponseEntity <User> getUserById(
				@PathVariable (name="userId", required = true) String userId
			) { 
		return userService.getUserById(userId);
	}
	@PostMapping("/users")
	@Operation(summary="사용자 정보 등록하기 ")
	public ResponseEntity <String > setUserInsert(
			@RequestBody User user
		) throws Exception { 
		
		return userService.setUserInsert(User);
	}
	
	/*
	* 메시지 큐
	*/
	@Bean
	Queue queue() {
		return new Queue(IChannel.CH_POINT_CUSTOMER, false);
	}

	@RabbitListener(queues = IChannel.CH_POINT_CUSTOMER)
	public void processMessage(String payload) { 
		try {
			Gson gson = new Gson();
			Type resType = new TypeToken<ChannelResponse<ResponsePointVO>>(){}.getType();
			ChannelResponse<ResponsePointVO> resObj = gson.fromJson(payload, resType);
	  
			Map<String, Object> parm = new HashMap<>();
			parm.put("userId", resObj.getPayload().getUserId());
			parm.put("userPoint", resObj.getPayload().getUserPoint());
	  
			userService.updatePoint(parm);
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
}
