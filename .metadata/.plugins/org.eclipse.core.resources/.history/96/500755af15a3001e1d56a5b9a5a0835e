package com.point.service;

import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.rabbit.core.RabbitMessagingTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.point.config.IChannel;
import com.point.model.ChannelRequest;
import com.point.model.ChannelResponse;
import com.google.gson.Gson;
import com.point.dao.PointRepository;
import com.point.model.Point;
import com.point.model.RequestPointDTO;
import com.point.model.ResponsePointDTO;
import com.point.model.ResultVO;
import com.point.model.UserPointDTO;

@Service
public class PointService {
	private final Logger log = LoggerFactory.getLogger(getClass());
	
	@Autowired
	private PointRepository pointRepository;

	@Autowired
	private RabbitMessagingTemplate queueTemplate;
	
	
	public ResponseEntity<ResultVO<Point>> search(String userId) {
		log.info("search point => "+userId);
		
		return new ResponseEntity<ResultVO<Point>>(
				ResultVO.<Point>builder()
				.returnCode(true)
				.result(pointRepository.findByUserId(userId))
				.build(), HttpStatus.OK);

	}

	public ResponseEntity<ResultVO<Point>> minus(String userId, int point) {
		log.debug("point MINUS => "+userId+":"+point);
		
		ResultVO<Point> result = null;
		try {
			/*
			 * MongoDB 갱신
			 */
			changePoint(userId, -point);

			result = ResultVO.<Point>builder()
					.returnCode(true)
					.result(pointRepository.findByUserId(userId))
					.build();
		} catch (Exception e) {
			result = ResultVO.<Point>builder()
					.returnCode(false)
					.returnMessage(e.getMessage())
					.build();
		}

		return new ResponseEntity<ResultVO<Point>>(result, HttpStatus.OK);
	}
	

	public ResponseEntity<ResultVO<Point>> plus(String userId, int point) {
		log.debug("point PLUS => "+userId+":"+point);
		
		ResultVO<Point> result = null;
		try {
			/*
			 * MongoDB 갱신
			 */
			changePoint(userId, point);

			result = ResultVO.<Point>builder()
					.returnCode(true)
					.result(pointRepository.findByUserId(userId))
					.build();
		} catch (Exception e) {
			result = ResultVO.<Point>builder()
					.returnCode(false)
					.returnMessage(e.getMessage())
					.build();
		}

		return new ResponseEntity<ResultVO<Point>>(result, HttpStatus.OK);
	}		

	private Point changePoint(String userId, int point) {
		Point obj = pointRepository.findByUserId(userId);

		if ( obj != null ) {
			log.info("current point:"+obj.getUserPoint()+", change point:"+point);
			obj.setUserPoint(obj.getUserPoint() + point);
			pointRepository.save(obj);
		}
		return obj;
	}
	
	/**
	 * 포인트 처리를 수행한다.
	 * 
	 * @param gs
	 * @param req
	 */
	public void startTransaction(Gson gs, ChannelRequest<RequestPointDTO> req)
	{
		/*
		 * 포인트 차감 처리 및 결과 반환
		 */

		try {
			
			RequestPointDTO payload = req.getPayload();
			String userId = payload.getUserId();
			log.info("차감 포인트:"+payload.getPoint());
			int point = payload.getPoint();		//차감할 포인트가 전달됨(예: -1000)
			Point obj = changePoint(userId, point);
			
			/*
			 * 고객정보의 Point 업데이트를 위한 메시지 발행 
			 */
			UserPointDTO reqPayload = new UserPointDTO();
			reqPayload.setUserId(userId);
			reqPayload.setUserPoint(obj.getUserPoint());

			ChannelRequest<UserPointDTO> reqMsg = new ChannelRequest<UserPointDTO>();
			reqMsg.setTrxId(req.getTrxId());
			reqMsg.setPayload(reqPayload);

			queueTemplate.convertAndSend(IChannel.CH_POINT_CUSTOMER, gs.toJson(reqMsg));
			
			/*
			 * 처리 결과를 메시지 브로커로 전송한다. 
			 */
			ResponsePointDTO resPayload = new ResponsePointDTO();
			resPayload.setUserId(payload.getUserId());
			resPayload.setUserPoint(obj.getUserPoint());

			ChannelResponse<ResponsePointDTO> res = new ChannelResponse<>();
			res.setTrxId(req.getTrxId());
			res.setMessageType("POINT");
			res.setReturnCode(true);
			res.setPayload(resPayload);

			queueTemplate.convertAndSend(IChannel.CH_ORDER_RESPONSE, gs.toJson(res));
		}catch(Exception e) {
			ChannelResponse<ResponsePointDTO> res = new ChannelResponse<>();
			res.setTrxId(req.getTrxId());
			res.setMessageType("POINT");
			res.setReturnCode(false);
			res.setErrorString(e.getMessage());
			queueTemplate.convertAndSend(IChannel.CH_ORDER_RESPONSE, gs.toJson(res));
		}
	}

	/**
	 * 주문 ID를 이용하여 포인트 차감을 취소한다.
	 * 
	 * @param req
	 */
	public void rollback(ChannelRequest<RequestPointDTO> req)
	{
		RequestPointDTO payload = req.getPayload();
		
		try {
			Point obj = changePoint(payload.getOrderId(), payload.getPoint());
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
}

