package com.order.service;

import java.lang.reflect.Type;
import java.net.URI;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import java.util.function.Consumer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.reflect.TypeToken;
import com.order.dao.OrderDao;
import com.order.model.*;
import reactor.core.publisher.Flux;
import reactor.core.publisher.FluxSink;
import reactor.core.publisher.Mono;
import reactor.core.scheduler.Schedulers;

@Service
public class OrderService 
{
	private final Logger log = LoggerFactory.getLogger(getClass());

	@Autowired
	private OrderDao orderDao;

	@Autowired
	private OrderManager orderManager;

	@Autowired
	private QueueComponent queue;

	@Value("${customer.db_host}")
	private String customerDBHost;
	@Value("${customer.db_port}")
	private String customerDBPort;

	@Value("${product.db_host}")
	private String productDBHost;	
	@Value("${product.db_port}")
	private String productDBPort;	

	@Value("${delivery.db_host}")
	private String deliveryDBHost;	
	@Value("${delivery.db_port}")
	private String deliveryDBPort;	

	/**
	 * @param orderId
	 * @return
	 */
	public Mono<ResultVO> getState(String orderId)
	{
		ResultVO<OrderState> result = new ResultVO<>();

		Order order = orderDao.selectOrder(orderId);
		if ( order != null ) {
			OrderState state = new OrderState();
			state.setOrderId(orderId);
			state.setOrderAmount(order.getOrderTotalAmount());
			//log.info("Total Amount:"+order.getOrderTotalAmount());
			/*
			 * 사용자 정보
			 */
			ResultVO<User> user = getCustomer(order.getOrderUserId());
			state.setUserName(user.getResult().getUserName());
			//log.info("Username:"+user.getResult().getUserName());
			/*
			 * 배송 정보
			 */
			ResultVO<Delivery> ship = getDelivery(order.getOrderId());
			state.setOrderDT(ship.getResult().getOrderDate());
			state.setShipAddress(ship.getResult().getShipAddress());
			state.setDeliveryState(ship.getResult().getShippingState());
			//log.info("Delivery Status:"+ship.getResult().getShippingState());
			
			result.setReturnCode(true);
			result.setResult(state);
		}
		else {
			result.setReturnCode(false);
			result.setReturnMessage("주문 정보가 없습니다.");
		}

		return Mono.just(result);
	}

	/**
	 * @param orderId
	 * @return
	 */
	private ResultVO<Delivery> getDelivery(String orderId) {
		RestTemplate restTemplate = new RestTemplate();

		String url = "http://"+deliveryDBHost + ":" + deliveryDBPort + "/api/shippings/" + orderId;
		ResultVO<Delivery> result = restTemplate.exchange(url, HttpMethod.GET, null, new ParameterizedTypeReference<ResultVO<Delivery>>(){}).getBody();

		return result;
	}

	/**
	 * @param prodName
	 * @return
	 */
	private ResultVO<ProductDTO> getProduct(String prodName) {
		RestTemplate restTemplate = new RestTemplate();

		String url = "http://"+productDBHost + ":" + productDBPort + "/api/products/" + prodName;
		ResultVO<ProductDTO> result = restTemplate.exchange(url, HttpMethod.GET, null, new ParameterizedTypeReference<ResultVO<ProductDTO>>(){}).getBody();

		return result;
	}

	/**
	 * 사용자 정보를 가져온다.
	 * 
	 * @param userId
	 * @return
	 */
	private ResultVO<User> getCustomer(String userId) {
		RestTemplate restTemplate = new RestTemplate();

		String url = "http://"+customerDBHost+":"+customerDBPort + "/api/users/" + userId;
		ResultVO<User> result = restTemplate.exchange(url, HttpMethod.GET, null, new ParameterizedTypeReference<ResultVO<User>>(){}).getBody();

		return result;
	}

	/**
	 * 비동기 주문 처리를 수행한다.
	 * 
	 * @param login 사용자 ID, 비밀번호
	 * @return
	 */
	public Mono<ResultVO<ResponseOrderDTO>> order(RequestOrderDTO order)
	{
		String orderId = UUID.randomUUID().toString();
		String trxId = UUID.randomUUID().toString();
		String orderDate = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());

		/*
		 * 메시지 브로커로 전달된 메시지를 Reactor 스트림으로 보내는 클래스
		 */
		ResultListener listener = new ResultListener();
		orderManager.addOrder(trxId, listener);

		/*
		 * 메시지 브로커를 통해 전달되는 이벤트 상태를 저장하는 클래스
		 */
		OrderEvent orderEvent = OrderEvent.builder()
				.trxId(trxId)
				.orderId(orderId)
				.order(order)
				.build();

		if(order.getUsePoint() <= 0) orderEvent.setPointCompleted(true);

		/*
		 * 실행 결과 및 응답객체
		 */
		ResponseOrderDTO resOrder = new ResponseOrderDTO();
		resOrder.setOrderId(orderId);
		resOrder.setOrderDate(new SimpleDateFormat("yyyy-MM-dd").format(new Date()));

		ResultVO<ResponseOrderDTO> retVo = new ResultVO<>();
		retVo.setReturnCode(true);
		retVo.setResult(resOrder);

		/*
		 * 주문 가능 여부 검사 
		 */
		if(!checkInventoryQty(order)) {
			retVo.setReturnCode(false);
			retVo.setReturnMessage("주문 가능한 제품이 없습니다!");
			
			return Mono.just(retVo);
		}
		
		/*
		 * 포인트 사용 가능 여부 검사 
		 */
		if(!checkUserPoint(order)) {
			retVo.setReturnCode(false);
			retVo.setReturnMessage("보유 포인트가 부족합니다!");
			
			return Mono.just(retVo);
		}

		return Flux.create(sink -> {
			listener.register(sink);
		})
			.contextWrite(ctx -> ctx.put("orderEvent", orderEvent))
			.doOnSubscribe(data->{
				startTransaction(order, trxId, orderId, orderDate);
			})
			.doOnNext(recvData->{
				 // 참여 서비스에서 응답이 오면 수행
				processResponse(recvData, orderEvent, retVo);
			})
			.buffer(3)
			.next()
			.thenReturn(retVo)
			.doAfterTerminate(()-> {
				//endTransaction(trxId);
			})
			// TIMEOUT
			.publishOn(Schedulers.single())
			.timeout(Duration.ofSeconds(60))
			.doOnError(e -> {
				retVo.setReturnCode(false);
				if ( e instanceof FailThrowable ) {
					retVo.setReturnMessage(((FailThrowable)e).getErrorString());
				}
				else {
					// TimeoutException
					e.printStackTrace();
					retVo.setReturnMessage("처리 시간을 초과 하였습니다.");
				}

				rollback(trxId, orderId, orderEvent);
				endTransaction(trxId);
			})
			.onErrorReturn(retVo);    
	}

	/*
	 * 재고량을 체크하여 주문 가능 여부 검사 
	 */
	private boolean checkInventoryQty(RequestOrderDTO order) {
		int inventoryQty = 0;
		int qty = 0;
		int totQty = 0;
		ResultVO<ProductDTO> prod = null;

		for(RequestOrderDetailDTO item : order.getProducts()) {
			prod = getProduct(item.getProductName());
			inventoryQty = prod.getResult().getInventoryQty();
			qty = item.getQty();

			if(qty <= inventoryQty) {
				log.info("["+item.getProductName()+"] 주문 수량:" + qty + ", 재고량:"+inventoryQty+"=>주문 가능");

				totQty += item.getQty();				
			} else {
				log.info("["+item.getProductName()+"] 주문 수량:" + qty + ", 재고량:"+inventoryQty+"=>주문 불가");
			}
		}
		if(totQty > 0) {
			return true;	
		} else {
			return false;
		}
	}

	/*
	 * 
	 */
	private boolean checkUserPoint(RequestOrderDTO order) {
		ResultVO<User> user = getCustomer(order.getUserId());
		log.info("보유 포인트:" + user.getResult().getPointNumber()+", 신청 포인트:"+order.getUsePoint());
		if(order.getUsePoint() > user.getResult().getPointNumber()) {
			return false; 
		} else {
			return true;
		}
	}
	
	/**
	 * 메시지 브로커로 메시지가 수신되면 수행한다.
	 * 
	 * @param recvData
	 * @param event
	 * @param resultVo
	 */
	private void processResponse(Object recvData, OrderEvent event, ResultVO resultVo)
	{
		Gson gson = new Gson();
		JsonObject jsonObj = ((JsonElement)recvData).getAsJsonObject();
		String type = jsonObj.get("messageType").getAsString();
		log.info("#### ["+type+"] START processResponse");

		if ( "PAYMENT".equals(type) ) {
			Type resType = new TypeToken<ChannelResponse<ResponsePaymentDTO>>(){}.getType();
			ChannelResponse<ResponsePaymentDTO> resObj = gson.fromJson((JsonElement)recvData, resType);

			if ( resObj.isReturnCode() == false ) {
				resultVo.setReturnCode(false);
				resultVo.setReturnMessage(resObj.getErrorString());
			}
		}
		else if ( "DELIVERY".equals(type) ) {
			Type resType = new TypeToken<ChannelResponse<ResponseDeliveryDTO>>(){}.getType();
			ChannelResponse<ResponseDeliveryDTO> resObj = gson.fromJson((JsonElement)recvData, resType);

			if ( resObj.isReturnCode() == false ) {
				resultVo.setReturnCode(false);
				resultVo.setReturnMessage(resObj.getErrorString());
			}
		}
		else if ( "POINT".equals(type) ) {
			Type resType = new TypeToken<ChannelResponse<ResponsePointDTO>>(){}.getType();
			ChannelResponse<ResponsePointDTO> resObj = gson.fromJson((JsonElement)recvData, resType);

			if ( resObj.isReturnCode() == false ) {
				resultVo.setReturnCode(false);
				resultVo.setReturnMessage(resObj.getErrorString());
			}
		}
		else if ( "PRODUCT".equals(type) ) {
			Type resType = new TypeToken<ChannelResponse<ProductInventoryDTO>>(){}.getType();
			ChannelResponse<ProductInventoryDTO> resObj = gson.fromJson((JsonElement)recvData, resType);

			if ( resObj.isReturnCode() == false ) {
				resultVo.setReturnCode(false);
				resultVo.setReturnMessage(resObj.getErrorString());
			}
		}
	}

	/**
	 * 주문 내역을 저장하고, 결제(payment-service), 배송(delivery-service)로 메시지를 전달한다.
	 * 
	 * @param order 클라이언트 요청 정보
	 * @param trxId 현재 트랜잭션 ID
	 * @param orderId 주문 ID
	 * @param orderDate 주문일시
	 */
	private void startTransaction(RequestOrderDTO order, String trxId, String orderId, String orderDate)
	{
		long price = 0;
		int inventoryQty = 0;
		int qty = 0;
		int total = 0;
		int totQty = 0;
		ResultVO<ProductDTO> prod = null;

		/*
		 * 주문 상세
		 */
		for(RequestOrderDetailDTO item : order.getProducts()) {
			OrderDetail dtl = new OrderDetail();

			prod = getProduct(item.getProductName());
			price = prod.getResult().getPrice();
			inventoryQty = prod.getResult().getInventoryQty();
			qty = item.getQty();


			dtl.setOrderId(orderId);
			dtl.setOrderQty(qty);
			dtl.setPrice((int) price);
			dtl.setProductName(item.getProductName());
			orderDao.insertDetail(dtl);

			total += price;
			totQty += item.getQty();				

		}


		/*
		 * 주문 마스터
		 */
		Order mst = new Order();
		mst.setOrderId(orderId);
		mst.setOrderDate(orderDate);
		mst.setOrderTotalAmount(total);
		mst.setOrderUserId(order.getUserId());
		mst.setAccumulatePoint((int)(total * 0.01));
		orderDao.insertOrder(mst);

		/*
		 * 사용자 정보를 얻는다.
		 */
		ResultVO<User> user = getCustomer(order.getUserId());


		/*
		 * 결제 요청 메시지
		 */
		RequestPaymentDTO reqPayment = new RequestPaymentDTO();
		reqPayment.setOrderId(orderId);
		reqPayment.setUserId(order.getUserId());
		reqPayment.setAmount(total);
		reqPayment.setQty(totQty);
		reqPayment.setCardNumber(user.getResult().getCardNumber());

		ChannelRequest<RequestPaymentDTO> req = new ChannelRequest<>();
		req.setTrxId(trxId);
		req.setPayload(reqPayment);

		Gson gson = new GsonBuilder().setPrettyPrinting().create();
		queue.sendPaymentMessage(gson.toJson(req));

		/*
		 * 배송 요청 메시지
		 */
		RequestDeliveryDTO reqDelivery = new RequestDeliveryDTO();
		reqDelivery.setOrderId(orderId);
		reqDelivery.setOrderUserId(order.getUserId());
		reqDelivery.setOrderUserName(user.getResult().getUserName());
		reqDelivery.setShipAddress(user.getResult().getAddress());
		reqDelivery.setOrderDate(orderDate);
		reqDelivery.setProducts(order.getProducts());

		ChannelRequest<RequestDeliveryDTO> reqShip = new ChannelRequest<>();
		reqShip.setTrxId(trxId);
		reqShip.setPayload(reqDelivery);

		queue.sendDeliveryMessage(gson.toJson(reqShip));

		/*
		 * 포인트 사용 메시지
		 */
		if ( order.getUsePoint() > 0 ) {
			RequestPointDTO payload = new RequestPointDTO();
			payload.setUserId(order.getUserId());
			payload.setOrderId(orderId);
			payload.setPlusMinus("-");
			payload.setPoint(order.getUsePoint());

			ChannelRequest<RequestPointDTO> reqUse = new ChannelRequest<RequestPointDTO>();
			reqUse.setTrxId(trxId);
			reqUse.setPayload(payload);

			queue.sendPointMessage(gson.toJson(reqUse));
		}
		
		//주문가에 따른 point 부여를 위한 메시지 발행 
		RequestPointDTO payload = new RequestPointDTO();
		payload.setUserId(order.getUserId());
		payload.setOrderId(orderId);
		payload.setPlusMinus("+");
		payload.setPoint((int) (total * 0.01));

		ChannelRequest<RequestPointDTO> reqUse = new ChannelRequest<RequestPointDTO>();
		reqUse.setTrxId(trxId);
		reqUse.setPayload(payload);

		queue.sendPointMessage(gson.toJson(reqUse));
		
		/*
		 * 제품 정보의 재고량 업데이트를 위한 메시지 발행 
		 */
		ProductInventoryDTO reqInventory = new ProductInventoryDTO();
		reqInventory.setOrderId(orderId);
		reqInventory.setProducts(order.getProducts());

		ChannelRequest<ProductInventoryDTO> reqMsg = new ChannelRequest<ProductInventoryDTO>();
		reqMsg.setTrxId(trxId);
		reqMsg.setPayload(reqInventory);

		queue.sendInventoryMessage(gson.toJson(reqInventory));
		
	}

	/**
	 * @param trxId 현재 트랜잭션 ID
	 */
	private void endTransaction(String trxId)
	{
		orderManager.removeOrder(trxId);
	}

	/**
	 * 타임아웃 또는 오류가 발생한 경우 수행
	 * 
	 * @param orderId
	 * @param OrderEvent
	 */
	public void rollback(String trxId, String orderId, OrderEvent event)
	{
		System.out.println("@.@ ROLLBACK :" + event); 

		/*
		 * order_mst 삭제 
		 */
		orderDao.deleteOrder(orderId);

		/*
		 * order_dtl 삭제
		 */
		orderDao.deleteOrderDetail(orderId);

		/*
		 * payment삭제 메시지 전달
		 */
		if(event.isPaymentCompleted()) {
			RequestPaymentDTO reqPayment = new RequestPaymentDTO();
			reqPayment.setOrderId(orderId);

			ChannelRequest<RequestPaymentDTO> req = new ChannelRequest<>();
			req.setTrxId(trxId);
			req.setMessageType("RLB");

			req.setPayload(reqPayment);

			Gson gson = new GsonBuilder().setPrettyPrinting().create();
			queue.sendPaymentMessage(gson.toJson(req));  

		}

		/*
		 * delivery 삭제 메시지 전달
		 */
		if(event.isDeliveryCompleted()) {
			RequestDeliveryDTO reqDelivery = new RequestDeliveryDTO();
			reqDelivery.setOrderId(orderId);

			ChannelRequest<RequestDeliveryDTO> reqShip = new ChannelRequest<>();
			reqShip.setTrxId(trxId);
			reqShip.setMessageType("RLB");
			reqShip.setPayload(reqDelivery);

			Gson gson = new GsonBuilder().setPrettyPrinting().create();
			queue.sendDeliveryMessage(gson.toJson(reqShip));    
		}

		/*
		 * point 차감 취소 메시지 전달
		 */
		if(event.isPointCompleted()) {
			RequestPointDTO reqPoint = new RequestPointDTO();
			RequestOrderDTO order = event.getOrder();

			if(order.getUsePoint() > 0) {
				reqPoint.setOrderId(orderId);
				reqPoint.setUserId(order.getUserId());
				reqPoint.setPlusMinus("+");
				reqPoint.setPoint(order.getUsePoint());
				ChannelRequest<RequestPointDTO> cancelPoint = new ChannelRequest<>();
				cancelPoint.setTrxId(trxId);
				cancelPoint.setMessageType("RLB");
				cancelPoint.setPayload(reqPoint);

				Gson gson = new GsonBuilder().setPrettyPrinting().create();
				queue.sendPointMessage(gson.toJson(cancelPoint));   							
			}
		}

		/*
		 * Product 재고량 취소 메시지 전달 
		 */
		if(event.isProductCompleted()) {
			ProductInventoryDTO reqInventory = new ProductInventoryDTO();
			RequestOrderDTO order = event.getOrder();
			reqInventory.setOrderId(orderId);
			reqInventory.setProducts(order.getProducts());

			ChannelRequest<ProductInventoryDTO> cancelInventory = new ChannelRequest<>();
			cancelInventory.setTrxId(trxId);
			cancelInventory.setMessageType("RLB");
			cancelInventory.setPayload(reqInventory);

			Gson gson = new GsonBuilder().setPrettyPrinting().create();
			queue.sendInventoryMessage(gson.toJson(cancelInventory));  
		}

	}

}

