package com.product.rest;

import java.lang.reflect.Type;

import org.springframework.amqp.core.Queue;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.product.config.IChannel;
import com.product.model.ChannelRequest;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.product.model.Product;
import com.product.model.ProductDTO;
import com.product.model.ProductInventoryDTO;
import com.product.model.ResultVO;
import com.product.service.ProductService;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;

@Tag(name="Product service API", description="Product service API")
@RestController
@RequiredArgsConstructor
@RequestMapping("/api")
public class ProductController {
	@Autowired
	private final ProductService productService;

	@PostMapping("/products")
	@Operation(summary = "상품을 등록합니다.")
	public ResponseEntity<ResultVO<Product>> register(@RequestBody ProductDTO product) throws Exception {
		return productService.register(product);
	}
	
	@GetMapping("/products/{prodName}")
	@Operation(summary = "상품을 검색합니다.")
	@Parameters({
		@Parameter(name="prodName", in=ParameterIn.PATH, description="상품명", required=true, allowEmptyValue=false) 
	})	
	public ResponseEntity<ResultVO<Product>> search(@PathVariable(name="prodName", required=true) String prodName) {
		return productService.search(prodName);
	}

	@PutMapping("/products/out/{prodName}/{qty}")
	@Operation(summary = "상품 출고처리를 수행합니다.")
	public ResponseEntity<ResultVO<Product>> out(
			@PathVariable(name="prodName", required=true) String prodName,
			@PathVariable(name="qty", required=true) int qty) {
		return productService.out(prodName, qty);
	}

	@PutMapping("/products/in/{prodName}/{qty}")
	@Operation(summary = "상품 입고처리를 수행합니다.")
	public ResponseEntity<ResultVO<Product>> in(
			@PathVariable(name="prodName", required=true) String prodName,
			@PathVariable(name="qty", required=true) int qty) {
		return productService.in(prodName, qty);
	}
	
	/*
	 * 메시지 큐
	 */
	@Bean
	Queue queue() {
		return new Queue(IChannel.CH_DELIVERY_PRODUCT, false);
	}

	@RabbitListener(queues = IChannel.CH_DELIVERY_PRODUCT)
	public void processMessage(String payload) { 
		System.out.println("[@.@ PRODUCT RECEIVED] " + payload.toString());
		try {
			Gson gs = new Gson();
			Type objType = new TypeToken<ChannelRequest<ProductInventoryDTO>>(){}.getType();
			ChannelRequest<ProductInventoryDTO> req = gs.fromJson(payload, objType);

			if ( "RLB".equals(req.getMessageType()) ) {
				productService.rollback(req);
			}
			else {
				// TRX
				productService.startTransaction(gs, req);
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
}
